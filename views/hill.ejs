<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet" href="/css/style_algorithms.css" type="text/css">
  <link rel="stylesheet" href="css/prism.css" type="text/css">
  <!-- CSS only -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">

  <!-- JavaScript Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"
    crossorigin="anonymous"></script>


  <!-- logo -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">


  <!-- font primary -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat&family=Press+Start+2P&display=swap" rel="stylesheet">

  <script src="https://kit.fontawesome.com/b39d81b729.js" crossorigin="anonymous"></script>

  <title>Cypher</title>

</head>

<body>

  <div class="path">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Hill Cipher</li>
      </ol>
    </nav>

  </div>


  <div class="main container">
    <div class="row">
      <div class="box question col">
        <h1><i class="icon fa-solid fa-hashtag fa-l"></i>
          What is Hill Cipher?</h1>

      </div>
    </div>

    <div class="row">
      <div class="box ans col">
        <p><i class="icon fa-solid fa-arrow-right fa-1x"></i>
           Hill cipher is more mathematical substitution technique than the other ciphers. Here, we use the concept of linear algebra, matrix inverse and matrix multiplication. This is also block cipher where we divide the messages into small blocks.</p>
      </div>
    </div>

    <div class="row">
      <div class="box steps col">
        <h2 class="box"><i class="icon fa-solid fa-hashtag fa-l"></i> Steps </h5>
        <ol>
          <li>Let the plain message be size of n. Select a key and a key matrix of size nxn.</li>
          <li>Fill the key matrix with the value which are mapped to key word characters. If the characters on the key don't fill up the whole matrix, add null value.</li>
          <li>Convert the row matrix of 1xn to column matrix of nx1 for matrix multiplication.</li>
          <li>The encryption happens by multiplicating key matrix of nxn with each block of nx1 matrix.</li>
          <li>To decrypt, we use the inverse of the key matrix. ( M*K % 26 = E so M = k <sup>-1</sup> * E  % 26)</li>
        </ol>
       
      </div>
    </div>
   

    <div class="box code_text">
    <pre>
      <code class="language-python">
        <div>
          import numpy as np
          def modularMulInv(a,m):
          
              # ax mod m =1 -> ((a mod m)*(x mod m)) mod m =1
              for x in range(1,m):
                  if(((a % m)*(x % m))%m ==1):
                      return x
              return -1
          
          def encrypt(keyMat,plainTextMat,cipherTextMat,n):
          
          
              #cipherTextMat= (keyMat * plainTextMat) % 26
              # (nx1)       = (nxn)  * (nx1)
              for i in range(0,n):
                  for j in range(0,1):
                      cipherTextMat[i][j]=0
                      for k in range(0,n):
                          cipherTextMat[i][j]+=(keyMat[i][k]*plainTextMat[k][j])
                          cipherTextMat[i][j]%=26
          
              print('Encrypted text =',end=' ')
              for i in range (0,n):
                  print(chr(cipherTextMat[i][0]+65),end='')
          
              print('\n')
          
          
          def decrypt(keyMat,cipherTextMat,n):
          
              # plainTextMat = (Inv(keyMat) * cipherTextMat) % 26
              # Inv(keyMat) % 26 = (adjVal % 26 * detVal %26 ) % 26
              # detVal % 26 = (det(keyMat) % 26 )^-1) % 26
              # -> detVal % 26 = modularMultiplicativeInverse((det(keyMat) % 26), 26)
              # adjVal % 26= (Adj(keyMat) % 26)
          
          
              keyMatInv = np.array([[0] * n for i in range(n)])  # nxn
              determinant=int(np.linalg.det(keyMat))
              determinant%=26
              determinant=modularMulInv(determinant,26) #detVal % 26
          
              for i in range(0,n):
                  for j in range(0,n):
                      temp=keyMat
                      temp=np.delete(arr=temp,obj=i,axis=0)
                      temp=np.delete(arr=temp,obj=j,axis=1)
                      keyMatInv[i][j]=(temp[0][0]*temp[1][1]-temp[0][1]*temp[1][0])
          
          
                      if(((i+1)+(j+1))%2!=0):
                          keyMatInv[i][j]*=(-1);
                      keyMatInv[i][j] %= 26
          
              keyMatInv = keyMatInv.transpose() #adjVal % 26
          
              #Inv(keyMat)
              for i in range(0,n):
                  for j in range(0,n):
                      keyMatInv[i][j] *= determinant
                      keyMatInv %= 26
          
          
          
              decryptedTextMat=np.array([[0] for i in range(n)])
          
              for i in range(0,n):
                  for j in range(0,1):
                      for k in range(0,n):
                          decryptedTextMat[i][j]+=(keyMatInv[i][k]*cipherTextMat[k][j])
                          decryptedTextMat%=26
          
              print('Decrypted text =', end=' ')
              for i in range(0, n):
                  print(chr(decryptedTextMat[i][0] + 65), end='')
          
              print('\n')
          
          
          
          
          n=3
          plainText='SAVEYOURSELF'
          key='RRFVSVCCT'
          print('Plain Text = ',plainText,end='\n')
          
          #initialize matrices
          keyMat = np.array([[0]*n for i in range(n)])#nxn
          plainTextMat= np.array([[0] for i in range (n)]) #nx1
          cipherTextMat = np.array([[0] for i in range(n)])  # nx1
          
          
          idx=0 #traverse through key and put it in the nxn matrix
          for i in range (0,n):
              for j in range (0,n):
                  keyMat[i][j]=ord(key[idx])-65
                  idx+=1
          
          if len(plainText)%3!=0:
            while(len(plainText)%3!=0):
              plainText+='Z'
          
          for i in range(0,len(plainText)):
                  plainTextMat[i%3][0]=ord(plainText[i])-65
                  if((i+1)%n==0):
                      encrypt(keyMat,plainTextMat,cipherTextMat,n)
                      decrypt(keyMat,cipherTextMat,n)
                  
          
          
          
            
        </div>
      </code>
      </pre>
      </div>



    <div class="row">
      <div class="box output col">
        <iframe src="https://trinket.io/embed/python3/cfa31b963e?outputOnly=true" width="100%" height="356" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
      </div>
    </div>

    <div class="row">
      <div class="box try col">
        <p>
        <div class="d-grid gap-2">
          <a class="btn btn-outline-primary m" data-bs-toggle="collapse" href="#collapseExample" role="button"
            aria-expanded="false" aria-controls="collapseExample">
            Try yourself <i class="fa-solid fa-angle-down"></i>
          </a>
        </div>
        </p>
        <div class="collapse" id="collapseExample">
          <div class="card card-body">
            <iframe src="https://trinket.io/embed/python3/cfa31b963e" width="100%" height="356" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
    <div class="box nb col">
      <p>This algorithm becomes more complex if the size of the key matrix increases so we will stick to 2*2 and 3*3 matrix only for example.</p>
    </div>
    </div>

  </div>
  </div>
  </div>

  <script src="js/prism.js"></script>

</body>

</html>